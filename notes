= to do do =

Simple shared Queue with "10 string abble slots"

The ObjectTransferPipe [fully double mutexed].
My own marshalling I guess <sigh>. from drb

note why this is so awesome/useful (overcome's MRI's deficiencies in this area)

Research python "real uses"

Some type of pool sounds "good"

SharedArray.new(:max => 10)

= high maybe =

Pool(10) do |input|

end

= notes/maybe =


a = Queue.new([1,2,3,], :processes => 32) {|input| # doesn't have to copy that...maybe just coordinate the "next spot" location with a mutex...shared int...

}

definitely...sometime...probably...want the QueueInItsOwnProcessSoItCanBufferForYou

buffer the input from the Q LOL "prefetch"

send_raw_string recv_raw_string

pmin, pmax, preduce LOL (and some magical fork/join wrapper 4 it LOL)

Maybe windows does it by avoiding/wrapping the main script, then calling "process, arg1, arg2" ...and smartly serializing the queues...

mention "rabbitmq" and other ways to distribute. zeromq/redis

Process.new(:dont_start_yet => true)

do something cool with iterators "returns an iterator while it works" :P

how in the world does it do

Process.new(:start_method, queue1, queue2) on windows?  It must pickle it somehow...but what? Seriously what? huh, in doze?? [just uses serialize for the instance, remembers what it is...]

easy split and map: like forkoff or lazy:

local_var = ary.in_sub_processes(10).each{|n|

  shared_array << n *33
}.map{|n| n*34}

make it jruby compatible? :)


a forkoff "equivalent" that just dies, doesn't have to pass values back, just assign them somehow...maybe serialize...
  maybe "after join it does a big unserialize" or "as it comes in, does an unserliaize, pass you back that"

"smarter" local serialized array:  when it hasn't been updated, don't re-unserialize :P

a = SharedProcess::SharedInt.new( +- default true I think...)
  make sure it doesn't accept bignum's

show how to use a "queue with Drb attached to it too"

super simple "spawn me up 5 processes in these boxes, with these parameters (drb, pointing back to me)" LOL

a = SharedInt(:max => 30)
a << 3

Ok the real only use cases:

10.times { fork { while(b = queue.pop); process(b); growing_shared_array.push(answer) }

a = Mutex.new
socket = ObjectTransferSocket.new
fork {
 get = socket.recv
 got = socket.send('abc')
}
socket.send('hello_there')
p socket.recv

maybe something like
q = ObjectTransferQueue.new
q.send 'anything'

but that's way off a bit...I think so anyway...


mention
 https://github.com/grosser/parallel

create my own:
  [1,2,3].par(group).each{|f| puts f} # always each LOL


"convert" the FFI to C based code only. speedy speed!

The "real" pool that can take things like pool.send(Q, :yoyo, arg1, arg2) or possibly Q.using_pool(instance).yoyo(arg1, arg2) or something more exotic?
  would this provide much benefit over parallel fork mgr though?
  two version of this: one has a "manager process" for arbitrarily long queues, queue element sizes.
    the other has "size 10" and fixed element sizes, and blocks when you fill them all up, is just synchronized with child processes

create a "block marshaller"

the overrider :P

SharedArray with mutex? mutex per index?

The "amazing queue" with its own worker process in the background.

looks like raindrops could provide people with atomic counters [maybe give an example--they don't need mutexes uh guess...]

system v stuff seems to...maybe be the same as this but...with poor documentation...LOL

slides don't seem to have much...except some syscall stuff, which might have semaphores, which we already have.


https://github.com/knu/ruby-mmap might actually be useful to people...maybe...guy's seems to be like the only one LOL.  some mmaps seems to be just for 'awesome' file access: http://www.ruby-forum.com/topic/99984 apparently windows has its on mmap method/gem [same link] it must be speedy or something, or allow for inserting into a file more easily or something: http://snippets.dzone.com/posts/show/5487

todo: drb example

mention flocking: http://blog.vmfarms.com/2011/03/cross-process-locking-and.html?showComment=1325347639313#c4215938866291365110  also hints that some day we may want to supply access to named semaphores for super-cross process cross language locking LOL

do we support message queues? do we care/want to? http://semanchuk.com/philip/posix_ipc/ [no]

mention "one easy way to share memory is just new it up before forking--all of them will have their own private copy of the data, so they can change it, etc"

posix and system v seem to be competitor cross processes [oh and doze is probably different too]

pipe example 

I guess ipc queue's just send back and forth "bytes" of x length...

mem = ProcessShared::SharedMemory.new(:int)  # extends FFI::Pointer -> SharedInt

maybe just instructions on 
Mutex = ProcessShared::Mutex [?]

can we have an array of shared strings? I guess now, since we can just use a marshalled shared memory for the same I guess...or you could have an array of shared memory into which you write strings [maybe a shared marshal array would be helpful then?]

appears multiprocessing's Queue is "just" a queue that uses a pipe for sending data back and forth

maybe also add a pipe helper "get object" "receive object" from this pipe
  monitormixin or just a parameter?A

appears multiprocessing has an option to start a manager "process" for certain objects...so client's can access queue's remotely? huh? does this replace Drb's server thread perhaps? this might be nice as a "don't have to worry about it drb" though I guess...hmm...meh they can just use the parent for it for now...oh wait they can just start it, then fork and close the socket in the parent [?]

maybe manager is a way for Drb to be shared cross machine?
  LODO: an example demo of "use this mutex across machines, too!"

may eventually want a real Pool object so that you can call do_async on it

SynchronizedArrayAccess too...

TODO fake array example LOL

they have an array that allows you to return values that are each A

appears Python's windows support is "load normally, skipping $0 == __FILE__ 's, then call the method" then...calling static methods?

TODO wrapped pipe 
  that is also multi process synchronized LOL indeed scawah otherwise!

http://parallelforkmgr.rubyforge.org  is like our own Pool...

link to beanstalk LOL/ postgres q

http://blog.radioni.ca/comments.php?id=232_0_1_0_C clever "wait for any child, fork a new one" (guess that's not quite a pool, though, but hey)

forkoff does not do pool's, just local pool's that keep full, or at least says it does anyway...

Queue with Marshalled strings saved to somewhere I guess needs a size param...

he was going to do SharedMemoryArray(:int, 200) # with or without synchronized access...I think that would be good for now...I think so...synchronized reads [and writes can't interrupt a read] TODO

Todo: double check if/or want things like:
  a = WorkerThread.new(F, :method_name, arg1, arg2)
    and then a pool of those, to avoid re-forking uh guess.
  and do we have a do_now and do_async somehow for existing pool forked threads?


propaganda:
  http://stackoverflow.com/questions/710785/working-with-multiple-processes-in-ruby
  http://stackoverflow.com/questions/855805/please-introduce-a-multi-processing-library-in-perl-or-ruby
